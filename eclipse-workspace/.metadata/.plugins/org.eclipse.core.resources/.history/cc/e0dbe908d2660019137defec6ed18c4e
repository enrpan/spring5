package com.bolsadeideas.springboot.backend.apirest.auth;

import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;

@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter {

	@Override
	public void configure(HttpSecurity http) throws Exception {
		// Se asignan los permisos de los roles en las rutas
		http.authorizeRequests().antMatchers(HttpMethod.GET, "/api/clientes", "/api/clientes/page/**").permitAll()  // El GET a estas dos rutas puede hacerla cualquiera aunque no esté autenticado. El ** es para indicar cualquier ruta a partir de esa
		.antMatchers(HttpMethod.GET, "/api/clientes/{id}").hasAnyRole("USER", "ADMIN")  // a esta ruta por GET pueden acceder usuarios y administradores. En el nombre del role no hace falta el "ROLE_". Lo añade automaticamente si no se pone
		.antMatchers(HttpMethod.POST, "/api/clientes/upload").hasAnyRole("USER", "ADMIN")
		.antMatchers(HttpMethod.POST, "/api/clientes").hasRole("ADMIN")  // Solo los admin pueden añadir clientes
		.antMatchers("/api/clientes/**").hasRole("ADMIN")  // Cualquier método (al no poner nada) solo puede acceder a las páginas de cuelguen de /api/clientes/ los admin
		.anyRequest().authenticated();  // Esto siempre se pone al final. Cualquier ruta no especificada implica que hay que estar autenticado
	}

}
