package com.bolsadeideas.springboot.backend.apirest.auth;

import java.util.Arrays;

import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter {

	@Override
	public void configure(HttpSecurity http) throws Exception {
		// Se asignan los permisos de los roles en las rutas
		http.authorizeRequests().antMatchers(HttpMethod.GET, "/api/clientes", "/api/clientes/page/**", "/api/uploads/img/**", "/images/**").permitAll()  // El GET a estas rutas puede hacerla cualquiera aunque no esté autenticado. El ** es para indicar cualquier ruta a partir de esa
		.antMatchers(HttpMethod.GET, "/api/clientes/{id}").permitAll()
		.antMatchers("/api/facturas/**").permitAll()
		/* Esta parte comentada es para asignar permisos sobre ruta a roles de forma programatica. Esta comentado porque esta hecho con anotaciones Secure en el controlador. 
		   La parte de las rutas con permitAll siempre hay que ponerla aqui. Y lo mismo la ultima linea por defecto
		.antMatchers(HttpMethod.GET, "/api/clientes/{id}").hasAnyRole("USER", "ADMIN")  // a esta ruta por GET pueden acceder usuarios y administradores. En el nombre del role no hace falta el "ROLE_". Lo añade automaticamente si no se pone
		.antMatchers(HttpMethod.POST, "/api/clientes/upload").hasAnyRole("USER", "ADMIN")
		.antMatchers(HttpMethod.POST, "/api/clientes").hasRole("ADMIN")  // Solo los admin pueden añadir clientes
		.antMatchers("/api/clientes/**").hasRole("ADMIN")  // Cualquier método (al no poner nada) solo puede acceder a las páginas de cuelguen de /api/clientes/ los admin
		*/
		.anyRequest().authenticated()  // Esto siempre se pone al final. Cualquier ruta no especificada implica que hay que estar autenticado
		.and().cors().configurationSource(corsConfigurationSource());
	}
	
	@Bean
	public CorsConfigurationSource corsConfigurationSource() {
		CorsConfiguration config = new CorsConfiguration();
		config.setAllowedOrigins(Arrays.asList("http://localhost:4200"));  // Se puede poner "*" para permitir cualquier origen
		config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
		config.setAllowCredentials(true);
		config.setAllowedHeaders(Arrays.asList("Content-Type", "Authorization"));
		
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", config);  // El /** significa cualquier ruta
		return source;
	}
	
	@Bean
	public FilterRegistrationBean<CorsFilter> corsFilter() {
		FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean<CorsFilter>(new CorsFilter(corsConfigurationSource()));
		bean.setOrder(Ordered.HIGHEST_PRECEDENCE);
		return bean;
	}

}
